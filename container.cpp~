#include "container.h"

#include <iostream>
#include <algorithm>
#include <iomanip>
// IO Manipulation
#include <fstream>
// Reading/Writing to/from Files
#include <stdexcept>
// Exception handling

#include "auxfunc.h"

Container::Container() 
// Standard constructor
{
    m_xTop = 0;
    m_xBottom = 0;
    m_yTop = 0;
    m_yBottom = 0;
    m_zTop = 0;
    m_zBottom = 0;
}

Container::Container(char direction,
            double x1, double x2, char boundx, 
            double y1, double y2, char boundy, 
            double z1, double z2, char boundz)
// Constructor
{
    // Check if direction is valid
    if (direction == 'x' || direction == 'y' || direction == 'z') 
        m_direction = direction;
    else 
        std::cerr << "Invalid direction argument for container!";
    
    // Make sure Topborder always has a higher value than bottom border.
    if (x1 > x2) {
        m_xTop = x1;
        m_xBottom = x2;
    } else {
        m_xTop = x2;
        m_xBottom = x1;
    }
    if (y1 > y2) {
        m_yTop = y1;
        m_yBottom = y2;
    } else {
        m_yTop = y2;
        m_yBottom = y1;
    }
    if (z1 > z2) {
        m_zTop = z1;
        m_zBottom = z2;
    } else {
        m_zTop = z2;
        m_zBottom = z1;
    }
    
    // Treat 'm' and 's' Style boundary conditions as normal 'f' boundaries
    if(boundx == 'm' || boundx == 's')
        boundx = 'f';
    if(boundy == 'm' || boundy == 's')
        boundy = 'f';
    if(boundz == 'm' || boundz == 's')
        boundz = 'f';
    
    // Check if the given boundary conditions are valid and set them
    if (boundx == 'p' || boundx == 'f') 
        m_boundx = boundx;
    else 
        std::cerr << "Unknown boundary condition for x-direction: '" << boundx << "'." << std::endl
            << "Known boundary conditions are 'p' for periodic"
            << "and 'f' for fixed boundaries.\n";
    
    if (boundy == 'p' || boundy == 'f') 
        m_boundy = boundy;
    else 
        std::cerr << "Unknown boundary condition for y-direction: '" << boundy << "'." << std::endl
            << "Known boundary conditions are 'p' for periodic"
            << "and 'f' for fixed boundaries.\n";
    
    if (boundz == 'p' || boundz == 'f') 
        m_boundz = boundz;
    else 
        std::cerr << "Unknown boundary condition for z-direction: '" << boundz << "'." << std::endl
            << "Known boundary conditions are 'p' for periodic"
            << "and 'f' for fixed boundaries.\n";
    
    // Print out the boundary conditions and borders for the user.
    std::cout << "Read box-boundaries from inputfile:"
        << "\n  x: " << m_xBottom << "--" << m_xTop;
    if (m_boundx == 'p')
        std::cout << " periodic boundaries";
    else if (m_boundx == 'f')
        std::cout << " fixed boundaries";
    else 
        std::cout << " unknown boundary conditions";
    
    std::cout << "\n  y: " << m_yBottom << "--" << m_yTop;
    if (m_boundy == 'p')
        std::cout << " periodic boundaries";
    else if (m_boundy == 'f')
        std::cout << " fixed boundaries";
    else 
        std::cout << " unknown boundary conditions";
    
    std::cout << "\n  z: " << m_zBottom << "--" << m_zTop;
    if (m_boundz == 'p')
        std::cout << " periodic boundaries";
    else if (m_boundz == 'f')
        std::cout << " fixed boundaries";
    else 
        std::cout << " unknown boundary conditions";
    
    std::cout << std::endl << std::endl;
}

void Container::addSphere(Sphere newsphere) 
// A method to add a sphere to the sphere vector. Also checks if the radius of
// the new sphere is a new unique radius and, if so, adds it to the uniqueradii
// vector.
{
    spheres.push_back(newsphere);
    // Check if the radius of the sphere is already registered in 
    // the uniqueradii vector
    bool isnewradius = true;
    // First check if uniqueRadii has elements
    if (uniqueRadii.begin() != uniqueRadii.end()) { 
        // If uniqueRadii has elements, iterate over all of them
        for(auto it = uniqueRadii.begin(); it != uniqueRadii.end(); ++it) {
            // If the radius of the current sphere matches an element of 
            // uniqueRadii the radius was allready registered
            // The current radius does not need to be registered and the 
            // iteration can stop.
            if ( newsphere.getRadius() == *it){
                isnewradius = false;
                break;
            }
        }
    } 
    // If it is a new radius, write it to the uniqueRadii vektor
    if (isnewradius == true) {
        uniqueRadii.push_back(newsphere.getRadius());
        // While we're at it, why not sort the uniqueRadii vektor
        // to ensure it's sorted all the time
        std::sort (uniqueRadii.begin(), uniqueRadii.end());
    }
    
}

void Container::addLayer(Layer newlayer)
// A method to add a layer to the layer vector
{
    layers.push_back(newlayer);
}

double Container::getTop(char direction)
// A method to get the top boundary of the experiment for the desired direciton
{
    if (direction == 'x') 
    {
        return m_xTop;
    }
    else if (direction == 'y') 
    {
        return m_yTop;
    }
    else if (direction == 'z') {
        return m_zTop;
    }
    else 
        std::cout << "Invalid direction in call for Container::getTop: '" 
            << direction << "'" << std::endl
            << "Valid diretions are 'x','y', or 'z'!";
}

double Container::getBottom(char direction)
// A method to get the bottom boundary of the experiment for the desired 
// direction
{
    if (direction == 'x')
        return m_xBottom;
    else if (direction == 'y')
        return m_yBottom;
    else if (direction =='z')
        return m_zBottom;
    else 
        std::cerr << "Invalid direction in call for Container::getBottom: '" 
            << direction << "'" << std::endl
            << "Valid diretions are 'x','y', or 'z'!";
}

void Container::setWraptreatment(char wraptreatment)
// This method sets wrap treatment to one of the following options
//      [i]gnore
//      [e]xtra-layer
//      add-to-[n]ext
//      add-to-[c]urrent
{
    if (wraptreatment == 'i' || wraptreatment == 'e' 
        || wraptreatment == 'n' || wraptreatment == 'c')
        m_wraptreatment = wraptreatment;
    else 
    {
        std::cerr << "Unknown wraptreatment option. "
            <<"Wraptreatment set to 'i'gnore." 
            << std::endl << std::endl;
        m_wraptreatment = 'i';
    }
        
}
void Container::prepareWrap(double maxRadius, double layersize)
// This method prepares the wrap treatment options other than 'ignore'.
// Two additional layers are added to the layers vector to
// count those parts of spheres that are wrapped in the experiment.
// This is only relevant if the experiment has periodic boundaries!
// One layer is added below the experiment and one layer is added on
// top of the experiment. The height of the two layers equals the
// maximum sphere radius of the experiment to make sure all spheres
// of the experiment are fully counted, even if the center of one of
// the spheres with the maxium radius is positiond at the absolute 
// bottom of the experiment.
// How sphere percentages in those two layers are ultimately treated
// depends on the explicit wrapping option.
{
	// Determine how many layers are needed. Add +0.5 to round the solution up.
	int numberOfLayers = (int) (maxRadius / layersize + 0.5);
	// Initialize the two layers
    Layer newBottomLayers[numberOfLayers];
    Layer newTopLayers[numberOfLayers];
    // Two doubles to hold the start of the layer below the experiment
    // and the end of the layer above the experiment.
    double top;
    double bottom;
    // Get the values and set the layers up, according to the counting-
    // direction
    if (m_direction == 'z')
    {
        bottom = m_zBottom;
        top = m_zTop;
    }
    else if (m_direction == 'x')
    {
        bottom = m_xBottom;
        top = m_xTop;
    } 
    else if (m_direction == 'y')
    {
        bottom = m_yBottom;
        top = m_yTop;
    } 

	// Set adequate borders for all additional layers.
	for (int i = 0; i < numberOfLayers; i++)
	{
		// Four variables to hold the borders of the current layers.
		double ctlt = top + (i+1) * layersize;    // CurrentTopLayerTop
		double ctlb = top + i * layersize;        // CurrentTopLayerBottom
		double cblt = bottom - i * layersize;     // CurrentBottomLayerTop
		double cblb = bottom - (i+1) * layersize; // CurrentBottomLayerBottom
		newStartLayers[i].setBorders
	}
    // Add the newBeginLayer at the start of the layers vevtor
    // and the newEndLayer at the end.
    auto it = layers.begin();
    layers.insert(it, newStartLayer);
    layers.push_back(newEndLayer);
}


void Container::createInfoVectors()
// This method creates the info arrays inside each sphere and each layer
// contained in the container.
// This is where the magic happens! :)
{
    std::cout << "Wraptreatment: " << m_wraptreatment << std::endl;
    // Check if wrap treatment is desired
    if(m_wraptreatment == 'e' || m_wraptreatment == 'n' || m_wraptreatment == 'c') 
    {
        //Get the maximum radius 
        double maxelementIterator = *max_element(uniqueRadii.begin(), uniqueRadii.end());
        std:: cout << "As far as i can see the maxium radius is : " << maxelementIterator << std::endl;
        prepareWrap(maxelementIterator, layers[0].getSize()); 
        std::cout << "Succesfully prepared wrap!" << std::endl;
    }
    
    int numberOfLayers = layers.size();
    int numberOfSpheres = spheres.size();
    int numberOfUniqueRadii = uniqueRadii.size();
    
    //First initialize the SphereVector inside of every layer
    for(int l = 0; l < numberOfLayers; ++l) 
    {
        layers[l].initSphereVector(numberOfUniqueRadii);
    }
    
    // Iterate through all spheres with Integer 'm'
    for(int m = 0; m < numberOfSpheres; ++m) 
    {
        
        // Iterate through all layers with Integer 'n'
        for(int n = 0; n < numberOfLayers; ++n) 
        {
            
            // Check what percentage of the current sphere(m) is in the current 
            // layer (n)
            double percentinlayer = 
                spheres[m].percentinlayer(layers[n], m_direction);
            // Find the position of the radius of the sphere inside the
            // uniqueRadii vector
            int radiusPosition = whereIsUniqueRadius( spheres[m].getRadius());
            
            spheres[m].setPercentInLayer(percentinlayer);
            layers[n].addSphere(percentinlayer, radiusPosition);
        }
    }
    
    std::cout << "Succesfully counted " << numberOfSpheres << " spheres in " << numberOfLayers << " layers." << std::endl;
    
    // Check if add-to-[n]ext or add-to-[c]urrent wrap treatment option
    // are desired. In that case start postWrapCorrection for all spheres
    // and layers
    if (m_wraptreatment == 'n' || m_wraptreatment == 'c')
    {
        // Start postWrapCorrection for all spheres.
        for(int i = 0; i < numberOfSpheres; ++i) 
        {
            spheres[i].postWrapCorrection(m_wraptreatment);
        }
        std::cout << "All spheres performed postWrapCorrection!" << std::endl;
        // Now start postWrapCorrection for the layers
        int layerToAddBottomTo;
        int layerToAddTopTo;
        // layerToAddBottomTo is the index of the layer to which the bottom extra-layer is to be added to.
        // Remember in case of wrap treatment an extra-bottomlayer has been added to the experiment by method Container::prepareWrap.
        // So in case of add-to-next the bottom extra-layer is to be added to the topmost of the actual layers.
        // In case of add-to-current the bottom extra-layer is to be added to the lowermost of the actural layers.
        if(m_wraptreatment == 'n')
            layerToAddBottomTo = numberOfLayers - 2;
        else
            layerToAddBottomTo = 1;
        // Same with layerToAddTopTo only viceversa
        if(m_wraptreatment == 'n')
            layerToAddTopTo = 1;
        else
            layerToAddTopTo = numberOfLayers - 2;
        
        // Now that we know to which layer the top extra-layer and the bottom extra-layer have to be added, lets add them! :)
        for (int i = 0; i < numberOfUniqueRadii; ++i) {
            layers[layerToAddBottomTo].addSphere(layers[0].getNumberOfSpheres(i),i);
            layers[layerToAddTopTo].addSphere(layers[numberOfLayers-1].getNumberOfSpheres(i),i);
        }
        
        // Now lets clean up by deleting top and bottom extra-layers.
        // Good thing, they are right at the start and the end of the layers vector, too!
        layers.erase (layers.begin());
        layers.pop_back();
        numberOfLayers -= 2;
    }
    
    std::cout << "Post Wrap Correction finished and layer-vector cleaned up!\n";
    
    // Get Porosity of each layer
    double length, width;
    if ( m_direction == 'z')
    {
        length = m_xTop - m_xBottom;
        width = m_yTop - m_yBottom;
    }
    else if ( m_direction == 'y')
    {
        length = m_xTop - m_xBottom;
        width = m_zTop - m_zBottom;
    }
    else if ( m_direction == 'x')
    {
        length = m_yTop - m_yBottom;
        width = m_zTop - m_zBottom;
    }
    for(int i = 0; i < numberOfLayers; ++i) 
    {
        layers[i].calculatePorosity(uniqueRadii, length, width);
    }
    
    std::cout << "Porosity has been calculated for each Layer.\n";
    
}

char Container::getBoundary(char direction)
// This method returns the boundary conditions in the given direction
{
    if (direction == 'z') 
    {
        return m_boundz;
    } 
    else if (direction == 'x')
    {
        return m_boundx;
    }
    else if (direction == 'y')
    {
        return m_boundy;
    }
    std::cerr << "What the heck are you talking about?" << std::endl
        << "There is no '" << direction << "'-direction!" << std::endl
        << "I'm returning an 'f' for 'F'uck you!" << std::endl << std::endl;
    return 'f';
}

void Container::writeOutputFile(char* outfiledirectory, char* infiledirectory, char outputOption) 
{
    // Variables for output formating
    std::cout.setf(std::ios::right);
    int width = 16;
    
    int numberOfLayers = layers.size();
    int numberOfSpheres = spheres.size();
    int numberOfUniqueRadii = uniqueRadii.size();
    std::ofstream outfile(outfiledirectory);
    outfile.precision(10);
    
    // 
    if (outputOption == 'l') 
    {
        // Print a timestamp
        time_t rawtime;
        struct tm * timeinfo;
        char buffer[80];
        time (&rawtime);
        timeinfo = localtime(&rawtime);
        outfile<< "Spherecounter outputfile created on ";
        strftime(buffer,80,"%d.%m.%Y %H:%M:%S",timeinfo);
        std::string str(buffer);
        outfile << str << "." << std::endl; 
        
        // Print counting direction
        outfile << "Spheres counted in " << m_direction << "-direction.\n";
        
        // Print wrap treatment option
        outfile << "Treatment of wrapped parts of spheres: ";
        if (m_wraptreatment == 'i')
            outfile << "ignore" << std::endl;
        else if (m_wraptreatment == 'e')
            outfile << "extra-layer" << std::endl;    
        else if (m_wraptreatment == 'n')
            outfile << "add-to-next" << std::endl;   
        else 
            outfile << "add-to-current" << std::endl;   
        outfile << std::endl << std::endl;
        
        // Write a describtion of the layers to the outputfile
        for (int i = 0; i < numberOfLayers; i++) 
        {
            outfile << "Layer #" << i+1 << ":";
            outfile << " Bottom border: " << layers[i].getBottom();
            outfile << "; Top border:" << layers[i].getTop() << std::endl;
        }
        outfile << std::endl;
    }
    
    
    /* -------------------------------------------------------------------------
        For every layer , write how many spheres of each radius are inside
    --------------------------------------------------------------------------*/
    if(outputOption != 'u')
    {
        outfile << "information about the layers:" << std::endl;
        outfile << "-----------------------------" << std::endl;
    }
    outfile << std::setw(11) << "radius";
    // write the header
    if ( m_wraptreatment != 'e' ) 
    {
        for (int i = 0; i < numberOfLayers; i++) 
        {
            outfile << std::setw(width-2) << "\"# layer " << i+1 << "\"";
        }
    }
    else
    {
        for (int i = 0; i < numberOfLayers-1; i++) 
        {
            outfile << std::setw(width-2) << "\"# layer " << i << "\"";
        }
        outfile << std::setw(width-2) << "\"# layer n+1" << "\"";
    }
    if (outputOption != 'u')
        outfile << std::setw(width-1) << "Total ";
    
    outfile << std::endl;
    if(outputOption != 'u')
    {
        // Draw a line with '-'
        outfile << std::setw(8+(numberOfLayers+1)*width) << std::setfill('-') << "--" 
                << std::endl << std::setfill(' ');
    }
    // Write to file the number of Spheres inside each layer sorted by
    // unique radius of the spheres
    for (int i = 0;  i < numberOfUniqueRadii; i++) 
    {
        double totalNumber = 0;
        outfile << std::setw(11) << uniqueRadii[i];
        for (int j = 0; j < numberOfLayers; j++) 
        {
            outfile << std::setw(width) << layers[j].getNumberOfSpheres(i);
            totalNumber += layers[j].getNumberOfSpheres(i);
        }
        outfile << std::setw(width) << totalNumber;
        outfile << std::endl;
    }

    outfile << std::setfill(' ') << std::right << std::setw(11) << "n:";
    for (int i = 0; i < numberOfLayers; i++)
    {
        std::cout.setf(std::ios::right);
        outfile << std::right << std::setw(width) << layers[i].getPorosity();
    }  
    outfile << std::endl << std::endl;
    
    /* -------------------------------------------------------------------------
        For every sphere, write to what percentage they are in which layer
    --------------------------------------------------------------------------*/
    double checkSumSum = 0; // A double to add up all checksums
    
    if(outputOption != 'u')
    {
        outfile << std::endl;
        outfile << "Information about the spheres:" << std::endl;
        outfile << "------------------------------" << std::endl;
        // Write the header of the table
        outfile << std::setw(6) << "Nr:";
        outfile << std::setiosflags(std::ios::fixed) << std::setw(width+1) 
                << "Volume:";
        if ( m_wraptreatment != 'e' ) 
        {
            for (int i = 0; i < numberOfLayers; i++) 
            {
                outfile << std::setw(width-1) << "# in layer " << i+1;
            }
        }
        else
        {
            for (int i = 0; i < numberOfLayers-1; i++) 
            {
                outfile << std::setw(width-1) << "# in layer " << i;
            }
            outfile << std::setw(width-1) << "# in layer n+1";
        }
        outfile << std::setiosflags(std::ios::fixed) << std::setw(width) 
                << "Checksum:";
        outfile << std::endl;
        // Draw a line of '-'
        outfile << std::setw(6+(numberOfLayers+2)*width) << std::setfill('-') << "--" 
                << std::endl << std::setfill(' ');
                
        // Start writing information for each sphere
        
        for (int i = 0; i < numberOfSpheres; i++) {
            // Write id and volume of sphere [i]
            outfile << std::setiosflags(std::ios::fixed) 
                    << std::setw(6) << spheres[i].getID() 
                    << std::setw(width) << spheres[i].getVolume();
            for (int j = 0; j < numberOfLayers; j++) {
                // Write what percentage of sphere[i] is inside layer [j]
                outfile << std::setiosflags(std::ios::fixed) << std::setw(width) 
                        << spheres[i].getPercentInLayer(j);
            }
            // Write the checksum to the outfile
            double checksum = spheres[i].getChecksum();
            outfile << std::setw(width) << checksum;
            checkSumSum += checksum;
            outfile << std::endl;
            outfile.flush();
        }
        if (outputOption == 'l') {
            outfile << "Total of all checksums: " << checkSumSum << std::endl;
            outfile << "Number of Spheres : " << numberOfSpheres << std::endl;
        }
    } 
    else
    {
        for (int i = 0; i < numberOfSpheres; i++) {
            checkSumSum += spheres[i].getChecksum();
        }
    }
    outfile.close();
    

    std::cout << "\nSum of Checksums = " << checkSumSum << "." << std::endl;
        
    // Check if Sum of Checksums equals number of Spheres
    double tolerance = 1.0;
    
    // If wraptreatment is 'ignore' paired with fixed boundary condition
    // apply a slight tolerance to make up for particle-boundary overlap.
    if ( m_wraptreatment == 'i')
    {
        if (m_direction == 'x' && m_boundx == 'f' ||  m_direction == 'y' && m_boundy == 'f' 
            || m_direction == 'z' && m_boundz == 'f')
        {
            tolerance = 1,00000000001;
        }
    }        
    if ( numberOfSpheres / checkSumSum <= tolerance ) 
    {
        std::cout << "All is well! Sum of checksums of all spheres equals number of spheres.";
    }
    else 
        std::cout << "WARNING: The sum of checksums of all spheres does not equal the number of spheres!";    
    std::cout << std::endl;        
}

int Container::whereIsUniqueRadius(double searchedRadius) 
{
    for (int i =  0;  i < uniqueRadii.size(); ++i) {
        if (searchedRadius == uniqueRadii[i]) {
            return i;
            break;
        }    
    }
}


